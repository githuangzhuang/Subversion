mysql体系结构
管理工具：命令
连接池：分配、管理和释放数据库连接
SQL接口：把SQL命令给mysql进程处理
分析器：分析语法命令正确
优化器：优化要执行的命令
查询缓存：查询曾经查找过的数据，从物理内存划分出来的缓存空间
存储引擎：
文件系统（磁盘）：

事物
myisam 引擎                                          innodb引擎
表名.frm结尾是存放的表结构                         .frm  存放表的结构
.myi存搜索引擎和字段排队信息                       .ibd 表的数据和索引信息
.myd存数据信息                                       存放在硬盘里

memory 引擎存放数据在内存知识临时的
###################################################################################
查看表的引擎：
show engines;
查看表的状态信息：
		            show status;
查看“table_lock”的变量信息：
				 like “$table_lock%”;

myisam存储引擎特点：
		支持表级锁       
                不支持事务
innoDB特点：
            支持行级索定                      
            支持事务、事务回滚、外键

事务日志文件，启动服务自动创建事务日志文件，记录操作过的文件
idbata1      
ib_logfile0
ib_logfile1

锁粒度：
    1.表级锁                  给表锁上，两客户端不能同时访问
    2.行级锁           只访问的行加锁，两客户端不能同时访问同一行，其它行可以其它客户端可以访问
    3.页级锁                  对整个页面进行加锁 
锁类型：
        读锁（共享锁）            支持并发读，其它客户端只能读
	写锁（互斥锁、排它锁）   当有一个人在对表读写时，其它客户端不能进行读写，只有当正在读写的那客户端退出后，才可以进行读写

事务：
       从连接服务器开始，到断开服务器的过程
事务回滚：
       当访问时任何一次操作失败时，会恢复之前所有的操作，依赖事务日志
 
事务特点（ACID）：
	   atomic 原子性      事务操作是一个整体，要么全部成功，要么全部失败   
      consistency一致性     事务操作的前后，表中的记录没有表化
         isolation 隔离性      事务操作是相互隔离不受影响
         durability 持久性     数据一旦提交，不可改变，永久改变表数据

事务特性：
show variables like "autocommit";       查看提交状态
set autocommit=off     关闭自动提交，只是仅限连接的一个会话，另一个客户端还是没变
rollback；               数据回滚
commit;                  提交数据

查询访问多的表，适合使用myisam存储引擎，节省系统资源（cup,内存）
写访问多的表，适合使用innodb存储引擎，并发访问量大
#########################################################################################33

数据导入：功能 批量把数据存储到数据库的表里
                 把文件的内容保存到表里

导入文件的路径一定要有
1.搜索默认使用目录路径：
show variables like "secure_file_priv"

2.建表一定要正确：
		> create table user(
    -> name char(30),
    -> password char(1),
    -> uid int,
    -> gid int,
    -> comment char(150),
    -> homedir char(150),
    -> shell char(50)
    -> );

3.把代码/数据复制到路径目录里面
>system cp /etc/passwd  /var/lib/mysql-files       #在数据库里使用终端命令system
  
4.从路径目录里面导入数据
> load data infile "/var/lib/mysql-files/passwd"       
    -> into table user
    -> fields terminated by ":"
    -> lines terminated by "\n";

5.设置行好：
	alter table user add id int primary key auto_increment first;

>load data infile "目录名/文件名"
>into table 表名
>fields terminated by "分隔符"
>lines terminated by "\n";

创建表的注意事项：
	字段分割符要与文件的一致
	导入数据的表字段类型要与文件字段匹配
###############################################################################
设置搜索路径：
1.停止mysqld服务
2.配置文件： /etc/my.cnf
   [mysqld]
   secure_file_priv="/mydata"                #设置根下，根其它人有执行的权限

3.创建目录：             mkdir /mydata
4.改为mysql属主：      chown mysql /mydata
5.启服务  mysqld


数据导出：把表里面的数据存储到文件
  select * from user into outfile
 ->"/mydata/db3x_user.txt";

select * from into outfile "目录名/文件名";
  fields terminated by "分隔符"                #不使用分隔符和段行默认tab更好
   lines terminated by "\n";

######################################################################################

管理表记录：
 1.插入	  insert into 表名(字段名列表) values (字段值列表)
              insert into user (name,uid,gid) values ("tom",4001,4002);
 2.查询        select 字段 from 表名 where 条件；
            select name,id from user where uid<=20;
 3.更新           update 表名 set 字段=字段值 where 条件表达式;
 4.删除         delete from user where shell is null;

################################################################################

基本匹配条件：
         不等于: !=      匹配空: is null   不匹配空: is not null
                                       < ; <= ;   > ;  >=
数值比较：
	select name,id from user where uid<=20;
	select name,id from user where 1<2;
	select name,id from user where uid=gid;
字符比较：
	select name,shell from user where shell!="/bin/bash";  
	select name,id from user where uid is null;            
	select name,uid from user where uid is not null;

逻辑匹配： 多个条件
	逻辑或：OR   逻辑与：AND  逻辑非： ！  提高优先级： ()

in(值列表)            在..里
	select 字段 from 表名 where 字段 in (字段值);
	select name from user where name in("root","bob");

not in（值列表）         不在...里
	select 字段 from 表明 where 字段 not in(字段值);
	select name,shell from user where shell not in("/bin/bash");

between 数字1 and 数值2                 在数字1和数字2之间的数
	select 字段 from 表名 where 字段 between 数字1  and 数字2;
	select name,id from user where id between 10 and 20;

distinct:去掉重复，可以显示有多少种类：
	select distinct 字段  from  表名;
	select distinct shell from user;

模糊查询：
 “%a%”  带a字符的； “a%” a开头的；  “%a” a结尾；    “a%a” a开头a结尾的
 “__” 两个字符       “_a_” 三个字符，中间是a的         “_%_”至少三个字符       
	select 字段 from 表名 where 字段 like  “ ”；
	select name from user where name like "%a%";

正则表达式：
   '^a|^t'  a开头或t开头     '^...$' 三个字符       '^a.*t$'  a开头t结尾，中间任意匹配
        select 字段 from 表名 where 字段 regexp '';
	select name,id from user where uid regexp '...';
              
四则运算：+；-；*；/；*；% 求于
	update user set uid=uid+1,gid=gid-1;
	select name,age,2018-age start from user where name="root";  
         #求出结果值，字段是 start 
提高执行的优先级：
	select name,uid,gid,(uid+gid)/2 pjz from user where name="bin";   
	#求平均值 ，字段是 pjz
	select name,uid from user where name="root" and (uid=1 or uid=2);
#######################################################################################

聚集函数：
	统计字段内的值
	avg  统计字段平均值， sum  统计字段之和, min 最小值， max 最大值，count 字段个数
select 函数(字段名) from 表名;
select  avg（id） from t1;

查询结果排序：
	order by 字段名           			 #通常是数值类型
 select name,uid from user order by 字段名;    #后面接 desc是从大到小顺序排列

查询结果分组：
select name,gid from user group by 字段名;           #通常是字符类型
select shell from user where uid<100 and uid>10 group by shell;

查询结果过滤：
	sql 查询 having  条件表达式
	sql 查询 where having  条件表达式
	sql 查询 group by 字段名 having 条件表达式
	select name from user where shell="/bin/bash" having name="mysql";

限制查询结果显示行数：
          sql 查询  limit n         #显示前n行
          sql 查询  limit n,m       #从第n行开始，显示后面m行,第一行从0开始的

select name from user where uid>10 limit 1,3;        #显示从第二行开始到后面的3行



